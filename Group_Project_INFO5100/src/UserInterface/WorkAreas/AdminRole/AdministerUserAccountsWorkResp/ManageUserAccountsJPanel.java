/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.WorkAreas.AdminRole.AdministerUserAccountsWorkResp;

import Business.Business;
import Business.UserAccounts.UserAccount;
import Business.UserAccounts.UserAccountDirectory;
import Business.Person.Person;
import Business.Profiles.Profile;
import Business.Profiles.AdminProfile;
import Business.Profiles.FacultyProfile;
import Business.Profiles.StudentProfile;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kal bugrara
 */
public class ManageUserAccountsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageSuppliersJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    UserAccount selecteduseraccount;

    public ManageUserAccountsJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        refreshTable();

    }

    public void refreshTable() {

//clear supplier table
        int rc = UserAccountTable.getRowCount();
        int i;
        for (i = rc - 1; i >= 0; i--) {
            ((DefaultTableModel) UserAccountTable.getModel()).removeRow(i);
        }

        UserAccountDirectory uad = business.getUserAccountDirectory();

        for (UserAccount ua : uad.getUserAccountList()) {

            Object[] row = new Object[5];
            row[0] = ua;
            //           row[1] = ua.getStatus(); //complete this..
            //           row[2] = ua.getLastUpdated()
            //           row[3] = 

            ((DefaultTableModel) UserAccountTable.getModel()).addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserAccountTable = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });
        add(Back);
        Back.setBounds(30, 300, 74, 23);

        Next.setText("Next >>");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });
        add(Next);
        Next.setBounds(500, 300, 80, 23);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel1.setText("User Accounts");
        add(jLabel1);
        jLabel1.setBounds(30, 90, 190, 19);

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Manage User Accounts");
        add(jLabel2);
        jLabel2.setBounds(21, 20, 550, 28);

        UserAccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "User Name", "Status", "Last Activity", "Last Updated"
            }
        ));
        UserAccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                UserAccountTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(UserAccountTable);

        add(jScrollPane1);
        jScrollPane1.setBounds(30, 110, 550, 130);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete);
        btnDelete.setBounds(420, 250, 72, 23);

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate);
        btnUpdate.setBounds(260, 250, 72, 23);

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate);
        btnCreate.setBounds(120, 250, 72, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
        //       ((java.awt.CardLayout)CardSequencePanel.getLayout()).show(CardSequencePanel, "IdentifyEventTypes");

    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        if (selecteduseraccount == null) {
            return;
        }
        AdminUserAccount mppd = new AdminUserAccount(selecteduseraccount, CardSequencePanel);
        CardSequencePanel.add(mppd);
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);

    }//GEN-LAST:event_NextActionPerformed

    private void UserAccountTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserAccountTableMousePressed
        // Extracts the row (uaser account) in the table that is selected by the user
        int size = UserAccountTable.getRowCount();
        int selectedrow = UserAccountTable.getSelectionModel().getLeadSelectionIndex();

        if (selectedrow < 0 || selectedrow > size - 1) {
            return;
        }
        selecteduseraccount = (UserAccount) UserAccountTable.getValueAt(selectedrow, 0);
        if (selecteduseraccount == null) {
            return;
        }
    }//GEN-LAST:event_UserAccountTableMousePressed

    //RijurikSaha_DeleteAccount-24/10
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:

        int row = UserAccountTable.getSelectedRow();

        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a user account to delete!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get the selected UserAccount object from the first column
        UserAccount selectedAccount = (UserAccount) UserAccountTable.getValueAt(row, 0);

        // Confirm deletion
        int confirm = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to delete the selected user account?",
                "Confirm Deletion",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            // Remove the selected user from the directory
            business.getUserAccountDirectory().removeUserAccount(selectedAccount);

            // Refresh the table to show updated data
            refreshTable();

            JOptionPane.showMessageDialog(null, "User account deleted successfully!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed
    //Rijurik_Saha_UpdateBtn-24/10
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //Rijurik_Saha-24/10

        int selectedRow = UserAccountTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a user account to update!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Get selected user account
        UserAccount selectedAccount = (UserAccount) UserAccountTable.getValueAt(selectedRow, 0);

        // Ask for new username
        String newUsername = JOptionPane.showInputDialog(null, "Enter new username:", selectedAccount.getUserLoginName());
        if (newUsername == null || newUsername.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Username cannot be empty!");
            return;
        }

        // Ask for new password
        String newPassword = JOptionPane.showInputDialog(null, "Enter new password:");
        if (newPassword == null || newPassword.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Password cannot be empty!");
            return;
        }

        // Ask for new role
        String[] roles = {"Admin", "Faculty", "Student"};
        String newRole = (String) JOptionPane.showInputDialog(
                null,
                "Select new role:",
                "Role Update",
                JOptionPane.QUESTION_MESSAGE,
                null,
                roles,
                selectedAccount.getRole()
        );

        if (newRole == null) {
            JOptionPane.showMessageDialog(null, "Role selection cancelled!");
            return;
        }

        // --- Update logic ---
        selectedAccount.setUsername(newUsername);
        selectedAccount.setPassword(newPassword);

        // Update profile if role changed
        if (!newRole.equalsIgnoreCase(selectedAccount.getRole())) {
            Profile updatedProfile = null;
            Person existingPerson = selectedAccount.getAssociatedPersonProfile().getPerson();

            if (newRole.equalsIgnoreCase("Admin")) {
                updatedProfile = new AdminProfile(existingPerson);
            } else if (newRole.equalsIgnoreCase("Faculty")) {
                updatedProfile = new FacultyProfile(existingPerson);
            } else if (newRole.equalsIgnoreCase("Student")) {
                updatedProfile = new StudentProfile(existingPerson);
            }

            selectedAccount.setProfile(updatedProfile);
        }

        // Refresh table to show updated info
        refreshTable();

        JOptionPane.showMessageDialog(null, "User account updated successfully!");
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        // TODO add your handling code here:
        //RijurikSaha_Create_24/10
        // Ask for username
        String username = JOptionPane.showInputDialog(null, "Enter Username:");
        if (username == null || username.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Username cannot be empty!");
            return;
        }

        // Ask for password
        String password = JOptionPane.showInputDialog(null, "Enter Password:");
        if (password == null || password.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Password cannot be empty!");
            return;
        }

        // Ask for role selection
        String[] roles = {"Admin", "Faculty", "Student"};
        String selectedRole = (String) JOptionPane.showInputDialog(
                null,
                "Select Role:",
                "Role Selection",
                JOptionPane.QUESTION_MESSAGE,
                null,
                roles,
                roles[0]
        );

        if (selectedRole == null) {
            JOptionPane.showMessageDialog(null, "Role selection cancelled!");
            return;
        }

        // Access UserAccountDirectory
        UserAccountDirectory uad = business.getUserAccountDirectory();

        // Check for duplicate usernames
        for (UserAccount ua : uad.getUserAccountList()) {
            if (ua.getUserLoginName().equalsIgnoreCase(username)) {
                JOptionPane.showMessageDialog(null, "Username already exists!");
                return;
            }
        }

        // Create a Profile object based on selected role
        Profile profile = null;

        if (selectedRole.equalsIgnoreCase("Admin")) {
            profile = new AdminProfile(new Person(username));
        } else if (selectedRole.equalsIgnoreCase("Faculty")) {
            profile = new FacultyProfile(new Person(username));
        } else if (selectedRole.equalsIgnoreCase("Student")) {
            profile = new StudentProfile(new Person(username));
        }

        // Create new UserAccount
        uad.newUserAccount(profile, username, password);

        JOptionPane.showMessageDialog(null, "User account created successfully with role: " + selectedRole);

        // Refresh table
        refreshTable();
    }//GEN-LAST:event_btnCreateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Next;
    private javax.swing.JTable UserAccountTable;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
