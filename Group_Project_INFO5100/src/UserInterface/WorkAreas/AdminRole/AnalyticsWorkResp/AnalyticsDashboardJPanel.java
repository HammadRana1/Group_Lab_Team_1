/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.AnalyticsWorkResp;

import Business.Business;
import Business.Profiles.FacultyProfile;
import Business.Profiles.StudentProfile;
import Business.Profiles.EmployeeProfile;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RIO
 */
public class AnalyticsDashboardJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AnalyticsDashboardJPanel
     */
    Business business;
    JPanel CardSequencePanel;

    public AnalyticsDashboardJPanel(Business b, JPanel cards) {
        this.business = b;
        this.CardSequencePanel = cards;
        initComponents();
        populateAnalyticsTable();
    }

    private void populateAnalyticsTable() {
        DefaultTableModel model = (DefaultTableModel) tblAnalytics.getModel();
        model.setRowCount(0);

        // --- Total users by role ---
        int totalAdmins = business.getEmployeeDirectory().getEmployeeList().size();
        int totalStudents = business.getStudentDirectory().getStudentList().size();
        int totalFaculty = business.getFacultyDirectory().getFacultyList().size();

        model.addRow(new Object[]{"Total Admins", totalAdmins});
        model.addRow(new Object[]{"Total Students", totalStudents});
        model.addRow(new Object[]{"Total Faculty", totalFaculty});

        // ---  Total Courses offered (if available) ---
        try {
            int totalCourses = business.getCourseScheduleDirectory().getCourseScheduleList().size();
            model.addRow(new Object[]{"Total Courses Offered", totalCourses});
        } catch (Exception e) {
            model.addRow(new Object[]{"Total Courses Offered", "N/A"});
        }

        // --- Total enrolled students per course (optional placeholder) ---
        model.addRow(new Object[]{"Total Enrolled Students (All)", totalStudents}); // later you can refine per course

        // ---  Tuition Revenue ---
        double totalTuition = 0.0;
        try {
            for (StudentProfile s : business.getStudentDirectory().getStudentList()) {
                totalTuition += s.getTotalTuitionPaid(); // if such field exists
            }
            model.addRow(new Object[]{"Total Tuition Revenue (USD)", "$" + totalTuition});
        } catch (Exception e) {
            model.addRow(new Object[]{"Total Tuition Revenue (USD)", "$0"});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        ScrollAnalytics = new javax.swing.JScrollPane();
        tblAnalytics = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnBack1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("University Analytics Dashboard");
        add(jLabel1);
        jLabel1.setBounds(170, 20, 400, 40);

        ScrollAnalytics.setToolTipText("");
        ScrollAnalytics.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblAnalytics.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Metric", "Value"
            }
        ));
        ScrollAnalytics.setViewportView(tblAnalytics);

        add(ScrollAnalytics);
        ScrollAnalytics.setBounds(130, 90, 410, 180);

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        add(btnRefresh);
        btnRefresh.setBounds(390, 300, 75, 27);

        btnBack1.setText("<<Back");
        btnBack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBack1ActionPerformed(evt);
            }
        });
        add(btnBack1);
        btnBack1.setBounds(200, 300, 80, 27);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBack1ActionPerformed
        // TODO add your handling code here:

        CardSequencePanel.remove(this);
        ((CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_btnBack1ActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:

        populateAnalyticsTable();

    }//GEN-LAST:event_btnRefreshActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ScrollAnalytics;
    private javax.swing.JButton btnBack1;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable tblAnalytics;
    // End of variables declaration//GEN-END:variables
}
