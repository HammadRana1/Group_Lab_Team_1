/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.AdminRole.ManageFacultyWorkResp;

import Business.Business;
import Business.Person.Person;
import Business.Profiles.FacultyProfile;
import Business.Profiles.FacultyAssignment;
import Business.University.CourseSchedule.CourseOffer;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;

/**
 *
 * @author RIO
 */
public class ManageFacultyJPanel extends javax.swing.JPanel {

    JPanel CardSequencePanel;
    Business business;

    /**
     * Creates new form ManageFacultyJPanel
     */
    public ManageFacultyJPanel(Business bz, JPanel jp) {
        this.business = bz;
        this.CardSequencePanel = jp;
        initComponents();
        populateTable();
        loadCourses(); // loads available courses into CBCourse
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        Back2 = new javax.swing.JButton();
        IDField = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        NameField = new javax.swing.JTextField();
        btnAddFaculty = new javax.swing.JButton();
        btnAssignCourse = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        lblEmail = new javax.swing.JLabel();
        EmailField = new javax.swing.JTextField();
        lblDepartments = new javax.swing.JLabel();
        DepartmentField = new javax.swing.JTextField();
        lblContacts = new javax.swing.JLabel();
        SearchValueField = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        btnDelete1 = new javax.swing.JButton();
        CBStatus = new javax.swing.JComboBox<>();
        lblCourse = new javax.swing.JLabel();
        CBCourse = new javax.swing.JComboBox<>();
        btnUpdate1 = new javax.swing.JButton();
        BtnSearch = new javax.swing.JButton();
        CBSearchFaculty = new javax.swing.JComboBox<>();
        ContactField1 = new javax.swing.JTextField();

        setBackground(new java.awt.Color(0, 153, 153));
        setLayout(null);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Manage Faculty");
        add(jLabel1);
        jLabel1.setBounds(200, 20, 190, 40);

        Back2.setText("<< Back");
        Back2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back2ActionPerformed(evt);
            }
        });
        add(Back2);
        Back2.setBounds(20, 450, 74, 23);
        add(IDField);
        IDField.setBounds(90, 80, 150, 30);

        lblID.setText("Faculty ID:");
        add(lblID);
        lblID.setBounds(20, 80, 70, 30);

        lblName.setText("Name:");
        add(lblName);
        lblName.setBounds(20, 120, 37, 30);
        add(NameField);
        NameField.setBounds(90, 120, 150, 30);

        btnAddFaculty.setText("Add Faculty");
        btnAddFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddFacultyActionPerformed(evt);
            }
        });
        add(btnAddFaculty);
        btnAddFaculty.setBounds(20, 400, 120, 23);

        btnAssignCourse.setText("Assign Course");
        btnAssignCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignCourseActionPerformed(evt);
            }
        });
        add(btnAssignCourse);
        btnAssignCourse.setBounds(260, 320, 130, 30);

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Faculty ID", "Name", "Email", "Department", "Contact", "Status", "Course"
            }
        ));
        tblStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStudents);

        add(jScrollPane1);
        jScrollPane1.setBounds(250, 80, 420, 130);

        lblEmail.setText("Email:");
        add(lblEmail);
        lblEmail.setBounds(20, 160, 37, 30);
        add(EmailField);
        EmailField.setBounds(90, 160, 150, 30);

        lblDepartments.setText("Department:");
        add(lblDepartments);
        lblDepartments.setBounds(20, 200, 90, 30);
        add(DepartmentField);
        DepartmentField.setBounds(90, 200, 150, 30);

        lblContacts.setText("Contact:");
        add(lblContacts);
        lblContacts.setBounds(20, 240, 70, 30);

        SearchValueField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchValueFieldActionPerformed(evt);
            }
        });
        add(SearchValueField);
        SearchValueField.setBounds(410, 220, 150, 30);

        lblStatus.setText("Status:");
        add(lblStatus);
        lblStatus.setBounds(20, 280, 37, 30);

        btnDelete1.setText("Delete");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete1ActionPerformed(evt);
            }
        });
        add(btnDelete1);
        btnDelete1.setBounds(290, 400, 72, 23);

        CBStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Active", "On Leave", "Graduated", " " }));
        CBStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBStatusActionPerformed(evt);
            }
        });
        add(CBStatus);
        CBStatus.setBounds(90, 280, 150, 30);

        lblCourse.setText("Course:");
        add(lblCourse);
        lblCourse.setBounds(20, 320, 50, 30);

        CBCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AED", "Web Design", "DBMS" }));
        CBCourse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBCourseActionPerformed(evt);
            }
        });
        add(CBCourse);
        CBCourse.setBounds(90, 320, 150, 30);

        btnUpdate1.setText("Update");
        btnUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdate1ActionPerformed(evt);
            }
        });
        add(btnUpdate1);
        btnUpdate1.setBounds(180, 400, 72, 23);

        BtnSearch.setText("Search");
        BtnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSearchActionPerformed(evt);
            }
        });
        add(BtnSearch);
        BtnSearch.setBounds(570, 220, 100, 30);

        CBSearchFaculty.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search By Name", "Search By ID", "Search By Department" }));
        CBSearchFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBSearchFacultyActionPerformed(evt);
            }
        });
        add(CBSearchFaculty);
        CBSearchFaculty.setBounds(250, 220, 150, 30);
        add(ContactField1);
        ContactField1.setBounds(90, 240, 150, 30);
    }// </editor-fold>//GEN-END:initComponents

    private void Back2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back2ActionPerformed
        // TODO add your handling code here:
        CardSequencePanel.remove(this);
        ((CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_Back2ActionPerformed

    private void btnAddFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddFacultyActionPerformed
        // TODO add your handling code here:
        //RijurikSaha-RegisterPerson-10/24
        String id = IDField.getText().trim();
        String name = NameField.getText().trim();
        String email = EmailField.getText().trim();
        String dept = DepartmentField.getText().trim();
        String contact = ContactField1.getText().trim();
        String status = CBStatus.getSelectedItem().toString();

        if (id.isEmpty() || name.isEmpty() || email.isEmpty() || dept.isEmpty() || contact.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields!");
            return;
        }

        if (business.getPersonDirectory().findPerson(id) != null) {
            JOptionPane.showMessageDialog(this, "Faculty with this ID already exists!");
            return;
        }

        // Create a Person and add to directory
        Person facultyPerson = business.getPersonDirectory()
                .newPerson(id, name, email, dept, "Faculty", contact, status);

        // Create FacultyProfile and add to FacultyDirectory
        business.getFacultyDirectory().newFacultyProfile(facultyPerson);

        JOptionPane.showMessageDialog(this, "Faculty added successfully!");
        clearFields();
        populateTable();
    }//GEN-LAST:event_btnAddFacultyActionPerformed

    private void btnAssignCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignCourseActionPerformed
        // TODO add your handling code here:
        //RijurikSaha-RegisterPerson-10/24
        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a faculty first!");
            return;
        }

        String id = tblStudents.getValueAt(selectedRow, 0).toString();
        FacultyProfile faculty = business.getFacultyDirectory().findFaculty(id);
        if (faculty == null) {
            JOptionPane.showMessageDialog(this, "Faculty profile not found!");
            return;
        }

        String selectedCourse = CBCourse.getSelectedItem().toString();
        if (selectedCourse.equals("Select a Course")) {
            JOptionPane.showMessageDialog(this, "Please select a course!");
            return;
        }

        // Find or create CourseOffer object (temporary placeholder)
        CourseOffer co = new CourseOffer();
        co.setCourseName(selectedCourse);

        faculty.AssignAsTeacher(co);

        JOptionPane.showMessageDialog(this, "Course assigned to faculty!");
        populateTable();
    }//GEN-LAST:event_btnAssignCourseActionPerformed

    private void tblStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentsMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow >= 0) {
            IDField.setText(tblStudents.getValueAt(selectedRow, 0).toString());
            NameField.setText(tblStudents.getValueAt(selectedRow, 1).toString());
            EmailField.setText(tblStudents.getValueAt(selectedRow, 2).toString());
            DepartmentField.setText(tblStudents.getValueAt(selectedRow, 3).toString());
            SearchValueField.setText(tblStudents.getValueAt(selectedRow, 4).toString());
            CBStatus.setSelectedItem(tblStudents.getValueAt(selectedRow, 5).toString());
        }
    }//GEN-LAST:event_tblStudentsMouseClicked

    private void btnDelete1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a faculty to delete!");
            return;
        }

        String id = tblStudents.getValueAt(selectedRow, 0).toString();

        // Remove from PersonDirectory
        Person p = business.getPersonDirectory().findPerson(id);
        if (p != null) {
            business.getPersonDirectory().removePerson(p);
        }

        // Remove from FacultyDirectory
        FacultyProfile fp = business.getFacultyDirectory().findFaculty(id);
        if (fp != null) {
            business.getFacultyDirectory().getFacultyList().remove(fp);
        }

        JOptionPane.showMessageDialog(this, "Faculty deleted successfully!");
        populateTable();
        clearFields();
    }//GEN-LAST:event_btnDelete1ActionPerformed

    private void CBStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBStatusActionPerformed

    private void CBCourseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBCourseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBCourseActionPerformed

    private void btnUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdate1ActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblStudents.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Select a faculty to update!");
            return;
        }

        String id = tblStudents.getValueAt(selectedRow, 0).toString();
        Person existing = business.getPersonDirectory().findPerson(id);

        if (existing != null) {
            existing.setName(NameField.getText().trim());
            existing.setEmail(EmailField.getText().trim());
            existing.setDepartment(DepartmentField.getText().trim());
            existing.setContact(ContactField1.getText().trim());
            existing.setAcademicStatus(CBStatus.getSelectedItem().toString());

            JOptionPane.showMessageDialog(this, "Faculty details updated successfully!");
            populateTable();
            clearFields();
        } else {
            JOptionPane.showMessageDialog(this, "Faculty not found!");
        }
    }//GEN-LAST:event_btnUpdate1ActionPerformed

    private void BtnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSearchActionPerformed
        // TODO add your handling code here:
        String keyword = SearchValueField.getText().trim().toLowerCase();
        String searchType = CBSearchFaculty.getSelectedItem().toString();

        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search keyword!");
            populateTable(); // reload all records
            return;
        }

        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        model.setRowCount(0);

        for (FacultyProfile fp : business.getFacultyDirectory().getFacultyList()) {
            Person p = fp.getPerson();

            boolean match = false;
            switch (searchType) {
                case "Search By ID":
                    if (p.getPersonId().toLowerCase().contains(keyword)) {
                        match = true;
                    }
                    break;
                case "Search By Name":
                    if (p.getName().toLowerCase().contains(keyword)) {
                        match = true;
                    }
                    break;
                case "Search By Department":
                    if (p.getDepartment().toLowerCase().contains(keyword)) {
                        match = true;
                    }
                    break;
            }

            if (match) {
                // Get all assigned courses
                StringBuilder courses = new StringBuilder();
                for (CourseOffer co : fp.getCourseOfferings()) {
                    courses.append(co.toString()).append(", ");
                }
                String courseDisplay = courses.length() > 0 ? courses.substring(0, courses.length() - 2) : "None";

                model.addRow(new Object[]{
                    p.getPersonId(),
                    p.getName(),
                    p.getEmail(),
                    p.getDepartment(),
                    p.getContact(),
                    p.getAcademicStatus(),
                    courseDisplay
                });
            }
        }

        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No matching records found.");
        }
        
        SearchValueField.setText("");

    }//GEN-LAST:event_BtnSearchActionPerformed

    private void CBSearchFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBSearchFacultyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBSearchFacultyActionPerformed

    private void SearchValueFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchValueFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchValueFieldActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblStudents.getModel();
        model.setRowCount(0);

        // Go through FacultyDirectory instead of PersonDirectory
        for (FacultyProfile fp : business.getFacultyDirectory().getFacultyList()) {
            Person p = fp.getPerson();

            // Gather all assigned course names
            StringBuilder courses = new StringBuilder();
            for (CourseOffer co : fp.getCourseOfferings()) {
                courses.append(co.toString()).append(", ");
            }

            String courseDisplay = courses.length() > 0 ? courses.substring(0, courses.length() - 2) : "None";

            model.addRow(new Object[]{
                p.getPersonId(),
                p.getName(),
                p.getEmail(),
                p.getDepartment(),
                p.getContact(),
                p.getAcademicStatus(),
                courseDisplay
            });
        }
    }

    private void loadCourses() {
        CBCourse.removeAllItems();
        CBCourse.addItem("Select a Course");

        CBCourse.addItem("AED");
        CBCourse.addItem("Web Design");
        CBCourse.addItem("DBMS");
    }

    private void clearFields() {
        IDField.setText("");
        NameField.setText("");
        EmailField.setText("");
        DepartmentField.setText("");
        ContactField1.setText("");
        SearchValueField.setText("");
        CBStatus.setSelectedIndex(0);
        CBCourse.setSelectedIndex(0);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Back1;
    private javax.swing.JButton Back2;
    private javax.swing.JButton BtnSearch;
    private javax.swing.JComboBox<String> CBCourse;
    private javax.swing.JComboBox<String> CBSearchFaculty;
    private javax.swing.JComboBox<String> CBStatus;
    private javax.swing.JTextField ContactField1;
    private javax.swing.JTextField DepartmentField;
    private javax.swing.JTextField EmailField;
    private javax.swing.JTextField IDField;
    private javax.swing.JTextField NameField;
    private javax.swing.JTextField SearchValueField;
    private javax.swing.JButton btnAddFaculty;
    private javax.swing.JButton btnAssignCourse;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnUpdate1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblContacts;
    private javax.swing.JLabel lblCourse;
    private javax.swing.JLabel lblDepartments;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTable tblStudents;
    // End of variables declaration//GEN-END:variables
}
